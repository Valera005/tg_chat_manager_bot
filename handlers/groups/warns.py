import datetime
import re

from aiogram.dispatcher.filters import IsReplyFilter, Regexp, ChatTypeFilter
from aiogram.types import Message, ChatType
from aiogram.utils.exceptions import TelegramAPIError, BadRequest
from asyncpg import Pool, UniqueViolationError

from data.config import time_delta, time_delta_postgres
from loader import prefixes, dp, interval_available
from utils.dop_func import get_mention, get_user_id, get_nickname, get_profile, get_interval_from_str, \
    check_if_has_permission

@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]), IsReplyFilter(is_reply=True),Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω[. ,!;]+(?P<interval>\d+\s+{interval_available})([ \n]+(?P<description>.+)?)?"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]), Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω[. ,!;]+(?P<interval>\d+\s+{interval_available})\s+@(?P<link>[\w\d]+)([ \n]+(?P<description>.+)?)?"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]), Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω[. ,!;]+@(?P<link>[\w\d]+)([ \n]+(?P<description>.+)?)?"))
async def warn_someone(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()

    if message.reply_to_message:
        d['link'] = str(message.reply_to_message.from_user.id)
    if not d['interval']:
        d['interval'] = "1 —Ç–∏–∂–¥–µ–Ω—å"
    if d['description']:
        description = d['description']
    else:
        description = None

    async with pool.acquire() as con:
        accused_user_id = await get_user_id(d['link'], con)

        await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id,
                                      accused_user_id=accused_user_id, pool=pool, command_name="–≤–∞—Ä–Ω")

        await con.execute(f'''Insert into warns(chat_id, user_id, datetime, datetime_of_expiration, description, moderator_user_id) values 
        ({message.chat.id}, {accused_user_id}, '{(message.date+time_delta).strftime("%Y-%m-%d %H:%M:%S")}'::timestamp, 
        '{(message.date+time_delta).strftime("%Y-%m-%d %H:%M:%S")}'::timestamp + '{get_interval_from_str(d['interval'])}'::interval, '{description.replace("'","''") if description else None}', {message.from_user.id})'''.replace("'None'", "null"))

        num_of_warns = await con.fetchval(
            f'''select count(1) from warns where chat_id = {message.chat.id} and user_id = {accused_user_id} and datetime_of_expiration>(now() + {time_delta_postgres})''')
        max_warns = await con.fetchval(f'''select max_warns from groups where chat_id = {message.chat.id}''')
        profile = await get_profile(message.chat.id, accused_user_id, con)

        admins = await message.chat.get_administrators()
        owner = None
        for admin in admins:
            if admin.is_chat_owner:
                owner = admin
                break

        if num_of_warns>=max_warns:
            await con.execute(f'''delete from warns where chat_id = {message.chat.id} and user_id = {accused_user_id}''')
            await dp.bot.ban_chat_member(chat_id=message.chat.id, user_id=accused_user_id)
            await message.answer(f'''
üî¥ –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
{get_mention(profile['user_id'], get_nickname(profile))}, –±–∞–Ω –Ω–∞–∑–∞–≤–∂–¥–∏
–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å, –Ω–∞–ø–∏—à–∏ <a href='tg://openmessage?user_id={owner.user.id}'>–≤–ª–∞—Å–Ω–∏–∫—É —á–∞—Ç–∞</a>''')
            return

        await message.answer(f'''
‚ùóÔ∏è {get_mention(profile['user_id'], get_nickname(profile))} –æ—Ç—Ä–∏–º—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ({num_of_warns}/{max_warns})
–ë—É–¥–µ—Ç —Å–Ω—è—Ç–æ —á–µ—Ä–µ–∑ {d['interval']}
–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {message.from_user.get_mention()}
{('üí¨ –ü—Ä–∏—á–∏–Ω–∞: ' + description) if description else ""}''')


@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]), Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω –ª–∏—Å—Ç"))
async def warn_list(message: Message, pool: Pool):
    text = "üóì –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–∞—Ç—É:\n"
    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool,command_name="–≤–∞—Ä–Ω –ª–∏—Å—Ç")

    async with pool.acquire() as con:
        warns = await con.fetch(f'''select warns.*, profiles.full_name, profiles.nickname, 
        (select full_name moderator_full_name from profiles where user_id = warns.moderator_user_id) 
        from warns inner join profiles on warns.user_id = profiles.user_id where chat_id = {message.chat.id} order by datetime_of_expiration desc limit 10''')

        if not warns:
            await message.answer(text + "üí¨ –ü–æ–∫–∞ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return

        n = '\n'
        for ind, warn in enumerate(warns, start=1):
            text+=f'''
<b>{ind}. {get_mention(warn['user_id'], warn['full_name'])}</b> [{warn['id']}]
‚è± –î–æ {warn['datetime_of_expiration'].strftime("%d.%m.%Y %H:%M")}{(n+'üí¨ –ü—Ä–∏—á–∏–Ω–∞: ' + warn['description']) if warn['description'] else ""}
–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {get_mention(warn['moderator_user_id'], warn['moderator_full_name'])}
'''
        await message.answer(text)


@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),IsReplyFilter(is_reply=True), Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω–∏"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]), Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω–∏[. ,!;]+@(?P<link>[\w\d]+)"))
async def warn_list(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()
    if message.reply_to_message:
        d = {"link": message.reply_to_message.from_user.id}

    async with pool.acquire() as con:
        accused_user_id = await get_user_id(d['link'], con)
        await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool,command_name="–≤–∞—Ä–Ω–∏")

        warns = await con.fetch(f'''select warns.*, profiles.full_name, profiles.nickname, 
        (select full_name moderator_full_name from profiles where user_id = warns.moderator_user_id) 
        from warns inner join profiles on warns.user_id = profiles.user_id where warns.chat_id = {message.chat.id} and warns.user_id = {accused_user_id} order by datetime_of_expiration desc limit 10''')

        if not warns:
            await message.answer("‚ùï –£ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å")
            return

        text = f"‚ùï –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {get_mention(warns[0]['user_id'], warns[0]['full_name'])}:\n"

        n = '\n'
        for ind, warn in enumerate(warns, start=1):
            text+=f'''
<b>{ind}. –û—Ç {get_mention(warn['moderator_user_id'], warn['moderator_full_name'])}</b> [{warn['id']}]
‚è± –î–æ {warn['datetime_of_expiration'].strftime("%d.%m.%Y %H:%M")}{(n+'üí¨ –ü—Ä–∏—á–∏–Ω–∞: ' + warn['description']) if warn['description'] else ""}
'''
        await message.answer(text)


@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),IsReplyFilter(is_reply=True), Regexp(r"(?is)^" + prefixes + fr"–≤–∞—Ä–Ω(–∏)?\s+–ª—ñ–º—ñ—Ç(?P<max_warns>\d+)"))
async def warn_list(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()
    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool, command_name="–≤–∞—Ä–Ω –ª—ñ–º—ñ—Ç")

    async with pool.acquire() as con:
        await con.execute(f'''update groups set max_warns = {d['max_warns']} where chat_id = {message.chat.id}''')

    await message.answer(f"‚úÖ –õ—ñ–º—ñ—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {d['max_warns']}")


@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–±–∞–Ω[. ,!;]+(?P<interval>\d+\s+{interval_available})\s+@(?P<link>[\w\d]+)([ \n]+(?P<description>.+)?)?"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–±–∞–Ω[. ,!;]+@(?P<link>[\w\d]+)([ \n]+(?P<description>.+)?)?"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),IsReplyFilter(is_reply=True), Regexp(r"(?is)^" + prefixes + fr"–±–∞–Ω[. ,!;]+(?P<interval>\d+\s+{interval_available})([ \n]+(?P<description>.+)?)?"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),IsReplyFilter(is_reply=True), Regexp(r"(?is)^" + prefixes + fr"–±–∞–Ω([ \n]+(?P<description>.+)?)?"))
async def ban_someone(message: Message, pool: Pool, regexp):
 async with pool.acquire() as con:


    d = regexp.groupdict()
    d['interval'] = get_interval_from_str(d['interval'])

    if not d['interval']:
        d['interval'] = await con.fetchval(f'''select ban_interval from groups where chat_id={message.chat.id}''')

    if not d['link'] and message.reply_to_message:
        d['link'] = str(message.reply_to_message.from_user.id)

    if not d['description']:
        d['description'] = ""

    accused_user_id = await get_user_id(d['link'], con)
    is_exist = await con.fetchval(f'''select exists(select 1 from users where chat_id = {message.chat.id} and user_id = {accused_user_id})''')

    if not is_exist:
        await message.answer(f'''–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤ –±–µ—Å—ñ–¥—ñ''')
        return

    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, accused_user_id= accused_user_id, pool=pool, command_name="–±–∞–Ω")

    datetime_of_expiration : datetime.datetime= await con.fetchval(f'''select '{(message.date+time_delta).strftime("%Y-%m-%d %H:%M:%S")}'::timestamp + '{d['interval']}'::interval;''')

    await dp.bot.ban_chat_member(chat_id=message.chat.id, user_id=accused_user_id, until_date=datetime_of_expiration)

    await con.execute(f'''insert into bans(chat_id, user_id, datetime, datetime_of_expiration, description, moderator_user_id) values 
    ({message.chat.id}, {accused_user_id}, '{(message.date+time_delta).strftime("%Y-%m-%d %H:%M:%S")}'::timestamp, 
    '{(message.date+time_delta).strftime("%Y-%m-%d %H:%M:%S")}'::timestamp + '{d['interval']}'::interval, 
    '{d['description'].replace("'","''") if d['description'] else None}', {message.from_user.id})'''.replace("'None'", "null"))


    profile = await get_profile(message.chat.id, accused_user_id, con)

    n = '\n'
    await message.answer(f'''
üî¥ {get_mention(profile['user_id'], get_nickname(profile))}
‚è± –ë–∞–Ω –¥–æ {datetime_of_expiration.strftime("%d.%m.%Y %H:%M")}{(n + 'üí¨ –ü—Ä–∏—á–∏–Ω–∞: ' + d['description']) if d['description'] else ""}
üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {message.from_user.get_mention()}''')


@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"—Ä–æ–∑–±–∞–Ω[. ,!;]+@(?P<link>[\w\d]+)"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),IsReplyFilter(is_reply=True), Regexp(r"(?is)^" + prefixes + fr"—Ä–æ–∑–±–∞–Ω"))
async def unban_someone(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()
    if message.reply_to_message:
        d = {"link" : message.reply_to_message.from_user.id}


    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool, command_name="—Ä–æ–∑–±–∞–Ω")
    async with pool.acquire() as con:
        accused_user_id = await get_user_id(d['link'], con)

        await dp.bot.unban_chat_member(chat_id=message.chat.id, user_id=accused_user_id, only_if_banned=True)
        await con.execute(f'''delete from bans where user_id = {accused_user_id} and chat_id = {message.chat.id}''')
        profile = await get_profile(message.chat.id, accused_user_id, con)
        await message.answer(text=f'''‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {get_mention(profile['user_id'], get_nickname(profile))} —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π. –¢–µ–ø–µ—Ä –π–æ–≥–æ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —É —á–∞—Ç''')



@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–±–∞–Ω –ª–∏—Å—Ç"))
async def ban_list(message: Message, pool: Pool):
    text = "<b>üóì –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ—Å—ñ–¥–∏:</b>\n"
    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool,command_name="–±–∞–Ω –ª–∏—Å—Ç")

    async with pool.acquire() as con:
        bans = await con.fetch(f'''select bans.*, profiles.full_name, profiles.nickname, 
            (select full_name moderator_full_name from profiles where user_id = bans.moderator_user_id) 
            from bans inner join profiles on bans.user_id = profiles.user_id where chat_id = {message.chat.id} order by datetime_of_expiration desc limit 10''')

        if not bans:
            await message.answer(text + "\nüí¨ –ü–æ–∫–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π")
            return

        n = '\n'
        for ind, ban in enumerate(bans, start=1):
            text += f'''
<b>{ind}. {get_mention(ban['user_id'], ban['full_name'])}</b> [{ban['id']}]
‚è± –î–æ {ban['datetime_of_expiration'].strftime("%d.%m.%Y %H:%M")}{(n + 'üí¨ –ü—Ä–∏—á–∏–Ω–∞: ' + ban['description']) if ban['description'] else ""}
–ó–∞–±–∞–Ω–∏–≤: {get_mention(ban['moderator_user_id'], ban['moderator_full_name'])}
'''
        await message.answer(text)


@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–∫—ñ–∫\s+–∞–∫—Ç–∏–≤\s+(?P<interval>\d+\s+{interval_available})"))
async def unban_someone(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()
    interval = get_interval_from_str(d['interval'])

    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool, command_name="–∫—ñ–∫ –∞–∫—Ç–∏–≤")

    async with pool.acquire() as con:
        interval_python : datetime.timedelta = await con.fetchval(f'''select '{interval}'::interval''')
        if interval_python>datetime.timedelta(hours=12):
            await message.answer(f'''–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ 12 –≥–æ–¥–∏–Ω''')
            return
        users = await con.fetch(f'''select user_id from messages where datetime > now()+{time_delta_postgres}-'{interval}'::interval''')

    ban_interval = datetime.timedelta(minutes=1)
    suc_num = 0
    unsuc_num = 0
    for user in users:
        try:
            await dp.bot.ban_chat_member(chat_id=message.chat.id, user_id=user['user_id'], until_date=ban_interval)
            suc_num+=1
        except BadRequest:
            unsuc_num+=1

    await message.answer(f'''–£—á–∞—Å–Ω–∏–∫–∏, —è–∫—ñ –ø—Ä–æ—è–≤–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º {d['interval']} –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–≥–Ω–∞–Ω—ñ
–£—Å–ø—ñ—à–Ω–æ –≤–∏–≥–Ω–∞–Ω–æ: {suc_num}
–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–≥–Ω–∞—Ç–∏: {unsuc_num}''')



@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–∫—ñ–∫\s+–Ω–æ–≤–∞—á–∫—ñ–≤\s+(?P<interval>\d+\s+{interval_available})"))
async def unban_someone(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()
    interval = get_interval_from_str(d['interval'])

    await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id, pool=pool, command_name="–∫—ñ–∫ –Ω–æ–≤–∞—á–∫—ñ–≤")

    async with pool.acquire() as con:
        users = await con.fetch(f'''select user_id from users where datetime > now()+{time_delta_postgres}-'{interval}'::interval  ''')

    ban_interval = datetime.timedelta(minutes=1)
    suc_num = 0
    unsuc_num = 0
    for user in users:
        try:
            await dp.bot.ban_chat_member(chat_id=message.chat.id, user_id=user['user_id'], until_date=ban_interval)
            suc_num+=1
        except BadRequest:
            unsuc_num+=1

    await message.answer(f'''–£—á–∞—Å–Ω–∏–∫–∏, —è–∫—ñ –ø—Ä–æ—è–≤–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º {d['interval']} –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–≥–Ω–∞–Ω—ñ
–£—Å–ø—ñ—à–Ω–æ –≤–∏–≥–Ω–∞–Ω–æ: {suc_num}
–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–≥–Ω–∞—Ç–∏: {unsuc_num}''')



@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–∫—ñ–∫\s+–≤—ñ–¥\s+@(?P<link>[\w\d]+)"))
async def unban_someone(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()

    async with pool.acquire() as con:
        accused_user_id = await get_user_id(d['link'], con)
        await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id,
                                      accused_user_id= accused_user_id, pool=pool, command_name="–∫—ñ–∫ –≤—ñ–¥")
        users = await con.fetch(f'''select user_id from users where invited_by = {accused_user_id}''')

    ban_interval = datetime.timedelta(minutes=1)
    suc_num = 0
    unsuc_num = 0
    for user in users:
        try:
            await dp.bot.ban_chat_member(chat_id=message.chat.id, user_id=user['user_id'], until_date=ban_interval)
            suc_num+=1
        except BadRequest:
            unsuc_num+=1

    await message.answer(f'''–£—á–∞—Å–Ω–∏–∫–∏, —è–∫—ñ –±—É–ª–∏ –¥–æ–¥–∞–Ω—ñ —é–∑–µ—Ä–æ–º {d['link']} –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–≥–Ω–∞–Ω—ñ
–£—Å–ø—ñ—à–Ω–æ –≤–∏–≥–Ω–∞–Ω–æ: {suc_num}
–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–≥–Ω–∞—Ç–∏: {unsuc_num}''')



@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),Regexp(r"(?is)^" + prefixes + fr"–∫—ñ–∫\s+@(?P<link>[\w\d]+)"))
@dp.message_handler(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),IsReplyFilter(is_reply=True),Regexp(r"(?is)^" + prefixes + fr"–∫—ñ–∫"))
async def unban_someone(message: Message, pool: Pool, regexp):

    d = regexp.groupdict()

    if message.reply_to_message:
        d = {"link": message.reply_to_message.from_user.id}


    async with pool.acquire() as con:
        accused_user_id = await get_user_id(d['link'], con)
        await check_if_has_permission(chat_id=message.chat.id, moderator_user_id=message.from_user.id,
                                      accused_user_id= accused_user_id, pool=pool, command_name="–∫—ñ–∫")

        profile = await get_profile(message.chat.id, accused_user_id,con)

    ban_interval = datetime.timedelta(minutes=1)
    try:
        await dp.bot.ban_chat_member(chat_id=message.chat.id, user_id=accused_user_id, until_date=ban_interval)
    except BadRequest as exc:
        await message.answer(f'''–ù–µ –≤–¥–∞–ª–æ—Å—å –∫—ñ–∫–Ω—É—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞, –ø—Ä–∏—á–∏–Ω–∞: {exc}''')

    await message.answer(f'''
üî¥ {get_mention(profile['user_id'], get_nickname(profile))} –±—É–≤ –∫—ñ–∫–Ω—É—Ç–∏–π
üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {message.from_user.get_mention()}
''')